Базовая рекурсия.
pred(0, Result).      % Базовый случай
pred(N, Result) :-    % Рекурсивный случай
    N > 0,            % Условие
    Next is N - 1,    % Уменьшаем N
    pred(Next, R1),   % Рекурсивный вызов
    Result is ...     % Комбинируем результат



Хвостовая рекурсия.
Было 
factorial(0, 1).
factorial(N, Result) :-
    N > 0,
    Prev is N - 1,
    factorial(Prev, Res),  % Рекурсивный вызов
    Result is N * Res.   % Операция ПОСЛЕ рекурсии

Стало:
factorial(N, Result) :-
    factorial(N, 1, Result). % Обертка

factorial(0, Acc, Acc) :- !. % База с отсечением
factorial(N, Acc, Result) :-
    N > 0,
    NewAcc is N * Acc,      % Вычисление ДО рекурсии
    NewN is N - 1,
    factorial(NewN, NewAcc, Result). % Вызов В ХВОСТЕ



Числа Фибоначчи.
Обычная рекурсия:
fibonacci(0, 0).
fibonacci(1, 1).
fibonacci(N, F) :-
    N > 1,
    N1 is N - 1,
    N2 is N - 2,
    fibonacci(N1, F1),
    fibonacci(N2, F2),
    F is F1 + F2.

Хвостовая рекурсия новый подход:
fibonacci(N, F) :-
    fibonacci(N, 0, 1, F).  % F0=0, F1=1  Нужны два аккумулятора потому что числа Фибоначчи зависят от двух предыдущих значений.

fibonacci(N, Result) :-
    fib(N, 0, 1, Result).

fib(0, Current, _, Current) :- !.
fib(N, Prev, Current, Result) :-
    N > 0,
    Next is Prev + Current,  % Следующее число Фибоначчи
    NewN is N - 1,
    fib(NewN, Current, Next, Result). % Хвостовой вызов














